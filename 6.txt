#include <stdio.h>
#include <stdlib.h>

typedef struct bst {
    int data;
    struct bst *left, *right;
} node;

void insert(node *, node *);
void inorder(node *);
node search(node *, int, node *);
void del(node *, int);
node *getnode();

int main() {
    int choice;
    char ans;
    int key;
    node *s, *root = NULL, *temp, *parent;

    do {
        printf("\n1. Create\n2. Search\n3. Delete\n4. Display\n5. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                do {
                    s = getnode();
                    printf("\nEnter the element: ");
                    scanf("%d", &s->data);

                    if (root == NULL)
                        root = s;
                    else
                        insert(root, s);

                    printf("Do you want to enter more elements? (y/n): ");
                    scanf(" %c", &ans);
                } while (ans == 'y' || ans == 'Y');
                break;

            case 2:
                printf("\nEnter the element which you want to search: ");
                scanf("%d", &key);
                temp = search(root, key, &parent);
                if (temp != NULL)
                    printf("\nNode found. Data: %d, Parent: %d", temp->data, (parent != NULL) ? parent->data : -1);
                else
                    printf("\nNode not found.");
                break;

            case 3:
                printf("\nEnter the element which you want to delete: ");
                scanf("%d", &key);
                del(root, key);
                break;

            case 4:
                printf("\nThe elements in the tree are: ");
                inorder(root);
                break;

            case 5:
                exit(0);
                break;

            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    } while (1);

    return 0;
}

node *getnode() {
    node *temp = (node *)malloc(sizeof(node));
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

void insert(node *root, node *temp) {
    if (temp->data < root->data) {
        if (root->left == NULL)
            root->left = temp;
        else
            insert(root->left, temp);
    } else {
        if (root->right == NULL)
            root->right = temp;
        else
            insert(root->right, temp);
    }
}

node *search(node *root, int key, node **parent) {
    node *temp = root;
    *parent = NULL;

    while (temp != NULL) {
        if (temp->data == key)
            return temp;
        *parent = temp;
        if (temp->data > key)
            temp = temp->left;
        else
            temp = temp->right;
    }
    return NULL;
}

void del(node *root, int key) {
    node *temp, *parent, *temp_succ;
    temp = search(root, key, &parent);

    if (temp == NULL) {
        printf("\nNode not found.");
        return;
    }

    if (temp->left != NULL && temp->right != NULL) {
        parent = temp;
        temp_succ = temp->right;
        while (temp_succ->left != NULL) {
            parent = temp_succ;
            temp_succ = temp_succ->left;
        }
        temp->data = temp_succ->data;
        temp = temp_succ;
    }

    if (temp->left == NULL && temp->right == NULL) {
        if (parent != NULL) {
            if (parent->left == temp)
                parent->left = NULL;
            else
                parent->right = NULL;
        } else {
            root = NULL;
        }
        free(temp);
        printf("\nNode deleted!");
        return;
    }

    if (temp->left != NULL && temp->right == NULL) {
        if (parent != NULL) {
            if (parent->left == temp)
                parent->left = temp->left;
            else
                parent->right = temp->left;
        }
        free(temp);
        printf("\nNode deleted!");
        return;
    }

    if (temp->left == NULL && temp->right != NULL) {
        if (parent != NULL) {
            if (parent->left == temp)
                parent->left = temp->right;
            else
                parent->right = temp->right;
        }
        free(temp);
        printf("\nNode deleted!");
        return;
    }
}

void inorder(node *temp) {
    if (temp != NULL) {
        inorder(temp->left);
        printf("%d ", temp->data);
        inorder(temp->right);
    }
}